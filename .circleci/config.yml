version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circleworkflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Desstroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.circleworkflow_id>>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.circleworkflow_id>>
            aws s3 rm s3://udapeople-<<parameters.circleworkflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.circleworkflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Revert migrations
          when: on_fail          
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n
            sudo n 13.8.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]    
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
      # npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            yum install -y openssh 
            yum install -y openssh-clients

      # - run:
      #     name: Ensure back-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #        --template-file .circleci/files/backend.yml \
      #        --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
      #        --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --region us-east-1 --output text)

            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # - destroy-environment:
      #     circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"xxaaq
#-filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
        environment:
           ANSIBLE_HOST_KEY_CHECKING: "no"
    steps:
      - checkout
   
      - run:
          name: Install dependencies
          command: |
            apk add --update  tar gzip nodejs npm ansible curl openssh-client
            pip install awscli 

      - add_ssh_keys:
          fingerprints: ["c8:92:15:8e:d0:ac:7d:f0:f4:12:87:00:cb:e5:70:21"]
      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvvv -i inventory.txt configure-server.yml

      # - destroy-environment:
      #     circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: hanan24/node-aws-ansible:1
        auth:
          username: hanan24
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:  
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys: [backend-build]
      
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update tar gzip nodejs npm curl zip
      #       pip install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            echo "NODE_ENV=production" >> .env
            echo "TYPEORM_CONNECTION=postgres" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations"  >> .env
            echo "TYPEORM_ENTITIES=./src/modules/domain/**/*.entity{.ts,.js}" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env
            npm install
            npm run premigrations
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
            cat .env
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "No migrations are pending" 
            fi
      # - destroy-environment:
      #     circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
    
 # export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
 #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
 #   --output text)
 # echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" >> .env
      
  deploy-frontend:
    docker:
      - image: hanan24/node-aws-ansible:1
        auth:
          username: hanan24
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Get backend url And Deploy frontend objects
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030"
            cd frontend 
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" >> .env
            cat .env
            npm run build:prod
            aws s3 cp dist s3://udapeople-8e13ba1 --recursive

      # - destroy-environment:
      #circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  deploy-backend:
    docker:
      - image: hanan24/node-aws-ansible:1
        auth:
          username: hanan24
          password: $DOCKERHUB_ACCESS_TOKEN
  
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["c8:92:15:8e:d0:ac:7d:f0:f4:12:87:00:cb:e5:70:21"]
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
            
      - run:
          name: Package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz  .circleci/ansible/roles/deploy/artifact.tar.gz 
            ls .circleci/ansible/roles/deploy/

      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvvv -i inventory.txt deploy-backend.yml

      # - destroy-environment:
      #     circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: hanan24/node-aws-ansible:1
        auth:
          username: hanan24
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Get backend url & Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030" 
            echo ${API_URL}
            if curl -s ${API_URL}/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-8e13ba1.s3-website-us-east-1.amazonaws.com"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
  # - destroy-environment:
  #     circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"            


  cloudfront-update:
    docker:
      - image: hanan24/node-aws-ansible:1
        auth:
          username: hanan24
          password: $DOCKERHUB_ACCESS_TOKEN
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID=8e13ba1 \
              --stack-name udapeople-cloudfront
  # - destroy-environment:
  #     circleworkflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
            #- test-frontend:
            # requires: [build-frontend]
            #- test-backend:
            #requires: [build-backend]
            #- scan-backend:
            #requires: [build-backend]
            #- scan-frontend:
            #requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [build-frontend, build-backend]
      #     filters:
      #       branches:
      #         only: [main]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]
      # - deploy-infrastructure:
            #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
